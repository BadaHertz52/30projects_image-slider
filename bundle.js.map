{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://webpack-boilerplate/./src/js/index.js","webpack://webpack-boilerplate/./src/js/imageSlider.js"],"sourcesContent":["import '../css/style.css';\r\nimport ImageSlider from './imageSlider';\r\n\r\nconst slider = new ImageSlider();\r\n","export default class ImageSlider {\r\n  #currentPosition = 0;\r\n  #sliderNumber = 0;\r\n  #sliderWidth = 0;\r\n  #intervalId;\r\n  #autoPlay = true;\r\n  sliderWrapEl;\r\n  sliderListEl;\r\n  nextBtnEl;\r\n  previousBtnEl;\r\n  indicatorWrapEl;\r\n  controlWrapEl;\r\n  constructor() {\r\n    this.assignElement();\r\n    this.initSliderNumber();\r\n    this.initSliderWidth();\r\n    this.intiSliderListWidth();\r\n    this.addEvent();\r\n    this.createIndicator();\r\n    this.setIndicator();\r\n    this.initAutoPlay();\r\n  }\r\n  assignElement() {\r\n    this.sliderWrapEl = document.getElementById('slider-wrap');\r\n    this.sliderListEl = this.sliderWrapEl.querySelector('#slider');\r\n    this.nextBtnEl = this.sliderWrapEl.querySelector('#next');\r\n    this.previousBtnEl = this.sliderWrapEl.querySelector('#previous');\r\n    this.indicatorWrapEl = this.sliderWrapEl.querySelector('#indicator-wrap');\r\n    this.controlWrapEl = this.sliderWrapEl.querySelector('#control-wrap');\r\n  }\r\n  initAutoPlay() {\r\n    this.#intervalId = setInterval(this.moveToRight.bind(this), 2000);\r\n  }\r\n  initSliderNumber() {\r\n    this.#sliderNumber = this.sliderListEl.querySelectorAll('li').length;\r\n  }\r\n  initSliderWidth() {\r\n    this.#sliderWidth = window\r\n      .getComputedStyle(this.sliderWrapEl)\r\n      .width.replace('px', '');\r\n  }\r\n  intiSliderListWidth() {\r\n    this.sliderListEl.style.width = `${\r\n      this.#sliderNumber * this.#sliderWidth\r\n    }px`;\r\n  }\r\n\r\n  addEvent() {\r\n    this.nextBtnEl.addEventListener('click', this.moveToRight.bind(this));\r\n    this.previousBtnEl.addEventListener('click', this.moveToLeft.bind(this));\r\n    this.indicatorWrapEl.addEventListener(\r\n      'click',\r\n      this.onClickIndicator.bind(this),\r\n    );\r\n    this.controlWrapEl.addEventListener('click', this.togglePlay.bind(this));\r\n    window.addEventListener('resize', () => {\r\n      this.initSliderWidth();\r\n      this.intiSliderListWidth();\r\n    });\r\n  }\r\n  restartAutoPlay() {\r\n    if (this.#autoPlay) {\r\n      clearInterval(this.#intervalId);\r\n      this.initAutoPlay();\r\n    }\r\n  }\r\n  moveToRight() {\r\n    /*마지막에서 슬라이든 멈출 경우\r\n    if (this.#currentPosition === this.#sliderNumber - 1) return;*/\r\n    // 마지막 이미지 -> 첫번째 이미지로 이동\r\n    if (this.#currentPosition === this.#sliderNumber - 1) {\r\n      this.#currentPosition = 0;\r\n    } else {\r\n      this.#currentPosition++;\r\n    }\r\n    this.sliderListEl.style.left = `-${\r\n      this.#sliderWidth * this.#currentPosition\r\n    }px`;\r\n    this.restartAutoPlay();\r\n    this.setIndicator();\r\n  }\r\n  moveToLeft() {\r\n    /*첫번째 이미지에서 슬라이드 멈출 경우\r\n    if (this.#currentPosition === 0) return;*/\r\n    // 첫번째 이미지-> 마지막 이미지\r\n    if (this.#currentPosition === 0) {\r\n      this.#currentPosition = this.#sliderNumber - 1;\r\n    } else {\r\n      this.#currentPosition--;\r\n    }\r\n    this.sliderListEl.style.left = `-${\r\n      this.#sliderWidth * this.#currentPosition\r\n    }px`;\r\n    this.restartAutoPlay();\r\n    this.setIndicator();\r\n  }\r\n  createIndicator() {\r\n    const docFragment = document.createDocumentFragment();\r\n    for (let i = 0; i < this.#sliderNumber; i++) {\r\n      const li = document.createElement('li');\r\n      li.dataset.index = i;\r\n      docFragment.appendChild(li);\r\n    }\r\n    this.indicatorWrapEl.querySelector('ul').appendChild(docFragment);\r\n  }\r\n  setIndicator() {\r\n    //전부 비활성화\r\n    this.indicatorWrapEl.querySelector('li.active')?.classList.remove('active');\r\n    // 현재 슬라이드 활성화\r\n    this.indicatorWrapEl\r\n      .querySelector(`ul li:nth-child(${this.#currentPosition + 1})`)\r\n      .classList.add('active');\r\n  }\r\n  onClickIndicator(event) {\r\n    const indexPosition = parseInt(event.target.dataset.index, 10);\r\n    // indicator가  아닌 곳 click 시, indexPosition = undefined;\r\n    // parserInt(undefined,10)= NaN;\r\n    if (Number.isInteger(indexPosition)) {\r\n      this.#currentPosition = indexPosition;\r\n      this.sliderListEl.style.left = `-${\r\n        this.#sliderWidth * this.#currentPosition\r\n      }px`;\r\n      this.setIndicator();\r\n    }\r\n  }\r\n  /**\r\n   *\r\n   * @param  status  : auto play를 실행할 거라면 \"play\", 그렇지 않을 경우에(auto play 멈춤)는 \"pause\"\r\n   */\r\n  handleAutoPlay(status) {\r\n    this.#autoPlay = status === 'play';\r\n    this.controlWrapEl.classList.add(status);\r\n    this.controlWrapEl.classList.remove(this.#autoPlay ? 'pause' : 'play');\r\n    this.#autoPlay ? this.initAutoPlay() : clearInterval(this.#intervalId);\r\n  }\r\n  togglePlay(event) {\r\n    const status = event.target.dataset.status;\r\n    this.handleAutoPlay(status);\r\n  }\r\n}\r\n"],"names":["sliderWrapEl","sliderListEl","nextBtnEl","previousBtnEl","indicatorWrapEl","controlWrapEl","constructor","this","assignElement","initSliderNumber","initSliderWidth","intiSliderListWidth","addEvent","createIndicator","setIndicator","initAutoPlay","document","getElementById","querySelector","setInterval","moveToRight","bind","querySelectorAll","length","window","getComputedStyle","width","replace","style","addEventListener","moveToLeft","onClickIndicator","togglePlay","restartAutoPlay","clearInterval","left","docFragment","createDocumentFragment","i","li","createElement","dataset","index","appendChild","classList","remove","add","event","indexPosition","parseInt","target","Number","isInteger","handleAutoPlay","status"],"sourceRoot":""}